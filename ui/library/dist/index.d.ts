// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../react-pdf
//   ../react-pdf/dist/Page

declare module '@allenai/pdf-components' {
    import './less/index.less';
    import { BoundingBox, Props as BoundingBoxProps } from '@allenai/pdf-components/src/components/BoundingBox';
    import { DocumentWrapper, Props as DocumentWrapperProps } from '@allenai/pdf-components/src/components/DocumentWrapper';
    import { DownloadButton, Props as DownloadButtonProps } from '@allenai/pdf-components/src/components/DownloadButton';
    import { HighlightOverlay, Props as HighlightOverlayProps } from '@allenai/pdf-components/src/components/HighlightOverlay';
    import { IconFlag } from '@allenai/pdf-components/src/components/icon/IconFlag';
    import { ArrowFlag } from '@allenai/pdf-components/src/components/marker/ArrowFlag';
    import { ArrowFlagBase, POSITION, PositionType } from '@allenai/pdf-components/src/components/marker/ArrowFlagBase';
    import { Outline } from '@allenai/pdf-components/src/components/outline/Outline';
    import { OutlineItem } from '@allenai/pdf-components/src/components/outline/OutlineItem';
    import { Overlay, Props as OverlayProps } from '@allenai/pdf-components/src/components/Overlay';
    import { PageNumberControl } from '@allenai/pdf-components/src/components/PageNumberControl';
    import { PageProps, PageWrapper, Props as PageWrapperProps } from '@allenai/pdf-components/src/components/PageWrapper';
    import { PrintButton, Props as PrintButtonProps } from '@allenai/pdf-components/src/components/PrintButton';
    import { Props as SidePanelProps, SidePanel } from '@allenai/pdf-components/src/components/SidePanel';
    import { Thumbnail } from '@allenai/pdf-components/src/components/thumbnails/Thumbnail';
    import { ThumbnailList } from '@allenai/pdf-components/src/components/thumbnails/ThumbnailList';
    import { BoundingBox as BoundingBoxType, Dimensions, Origin, RawBoundingBox, scaleRawBoundingBox, Size } from '@allenai/pdf-components/src/components/types/boundingBox';
    import { NodeDestination, OutlineNode } from '@allenai/pdf-components/src/components/types/outline';
    import { PageProperties, PageReference } from '@allenai/pdf-components/src/components/types/page';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    import { ZoomInButton } from '@allenai/pdf-components/src/components/ZoomInButton';
    import { ZoomOutButton } from '@allenai/pdf-components/src/components/ZoomOutButton';
    import { ContextProvider, Props as ContextProviderProps } from '@allenai/pdf-components/src/context/ContextProvider';
    import { DocumentContext, IDocumentContext } from '@allenai/pdf-components/src/context/DocumentContext';
    import { IPageRenderContext, PageRenderContext } from '@allenai/pdf-components/src/context/PageRenderContext';
    import { IScrollContext, ScrollContext } from '@allenai/pdf-components/src/context/ScrollContext';
    import { DEFAULT_ZOOM_SCALE, ITransformContext, TransformContext } from '@allenai/pdf-components/src/context/TransformContext';
    import { IUiContext, UiContext } from '@allenai/pdf-components/src/context/UiContext';
    import { PercentFormatter } from '@allenai/pdf-components/src/utils/format';
    import { RENDER_TYPE } from '@allenai/pdf-components/src/utils/reader-utils';
    import { isSideways, PageRotation, rotateClockwise, rotateCounterClockwise } from '@allenai/pdf-components/src/utils/rotate';
    import { generatePageIdFromIndex, scrollToId, scrollToPdfPageIndex } from '@allenai/pdf-components/src/utils/scroll';
    import { computeBoundingBoxStyle, computePageStyle, getPageHeight, getPageWidth } from '@allenai/pdf-components/src/utils/style';
    export type { BoundingBoxProps, BoundingBoxType, ContextProviderProps, Dimensions, DocumentWrapperProps, DownloadButtonProps, HighlightOverlayProps, IDocumentContext, IPageRenderContext, IScrollContext, ITransformContext, IUiContext, NodeDestination, Nullable, Origin, OutlineNode, OverlayProps, PageProperties, PageProps, PageReference, PageRotation, PageWrapperProps, PositionType, PrintButtonProps, RawBoundingBox, SidePanelProps, Size, };
    export { ArrowFlag, ArrowFlagBase, BoundingBox, computeBoundingBoxStyle, computePageStyle, ContextProvider, DEFAULT_ZOOM_SCALE, DocumentContext, DocumentWrapper, DownloadButton, generatePageIdFromIndex, getPageHeight, getPageWidth, HighlightOverlay, IconFlag, isSideways, Outline, OutlineItem, Overlay, PageNumberControl, PageRenderContext, PageWrapper, PercentFormatter, POSITION, PrintButton, RENDER_TYPE, rotateClockwise, rotateCounterClockwise, scaleRawBoundingBox, ScrollContext, scrollToId, scrollToPdfPageIndex, SidePanel, Thumbnail, ThumbnailList, TransformContext, UiContext, ZoomInButton, ZoomOutButton, };
    const _default: {
        BoundingBox: import("react").FunctionComponent<BoundingBoxProps>;
        computeBoundingBoxStyle: typeof computeBoundingBoxStyle;
        computePageStyle: typeof computePageStyle;
        ContextProvider: import("react").FunctionComponent<ContextProviderProps>;
        DEFAULT_ZOOM_SCALE: number;
        DocumentContext: import("react").Context<IDocumentContext>;
        DocumentWrapper: import("react").FunctionComponent<DocumentWrapperProps>;
        DownloadButton: import("react").FunctionComponent<DownloadButtonProps>;
        ArrowFlag: import("react").FunctionComponent<{
            boundingBoxes: BoundingBoxType[];
            className?: string | undefined;
            label?: string | undefined;
        }>;
        ArrowFlagBase: import("react").FunctionComponent<{
            className?: string | undefined;
            flagWidth?: number | undefined;
            label?: string | undefined;
            originTop?: number | undefined;
            position?: PositionType | undefined;
            tailLength?: number | undefined;
            tailWidgth?: number | undefined;
        }>;
        PrintButton: import("react").FunctionComponent<PrintButtonProps>;
        generatePageIdFromIndex: typeof generatePageIdFromIndex;
        getPageHeight: typeof getPageHeight;
        getPageWidth: typeof getPageWidth;
        HighlightOverlay: import("react").FunctionComponent<HighlightOverlayProps>;
        IconFlag: import("react").FunctionComponent<{
            children?: import("react").ReactNode;
            className?: string | undefined;
            headerPosition?: PositionType | undefined;
        }>;
        isSideways: typeof isSideways;
        Outline: import("react").FunctionComponent<{}>;
        OutlineItem: import("react").FunctionComponent<{
            items?: OutlineNode[] | undefined;
            onClick?: ((dest: NodeDestination) => void) | undefined;
        }>;
        Overlay: import("react").FunctionComponent<OverlayProps>;
        PageNumberControl: import("react").FunctionComponent<import("./src/components/PageNumberControl").Props>;
        PageRenderContext: import("react").Context<IPageRenderContext>;
        PageRotation: typeof PageRotation;
        PageWrapper: import("react").FunctionComponent<PageWrapperProps>;
        POSITION: {
            readonly LEFT: "LEFT";
            readonly RIGHT: "RIGHT";
        };
        SidePanel: import("react").FunctionComponent<SidePanelProps>;
        PercentFormatter: Intl.NumberFormat;
        RENDER_TYPE: {
            readonly MULTI_CANVAS: "multi-canvas";
            readonly SINGLE_CANVAS: "single-canvas";
        };
        rotateClockwise: typeof rotateClockwise;
        rotateCounterClockwise: typeof rotateCounterClockwise;
        scaleRawBoundingBox: typeof scaleRawBoundingBox;
        scrollToId: typeof scrollToId;
        scrollToPdfPageIndex: typeof scrollToPdfPageIndex;
        Thumbnail: import("react").FunctionComponent<{
            pageNumber: number;
        }>;
        ThumbnailList: import("react").FunctionComponent<any>;
        ScrollContext: import("react").Context<IScrollContext>;
        TransformContext: import("react").Context<ITransformContext>;
        UiContext: import("react").Context<IUiContext>;
        ZoomInButton: import("react").FunctionComponent<import("./src/components/ZoomInButton").Props>;
        ZoomOutButton: import("react").FunctionComponent<{}>;
    };
    export default _default;
}

declare module '@allenai/pdf-components/src/components/BoundingBox' {
    import * as React from 'react';
    import { BoundingBox as BoundingBoxType } from '@allenai/pdf-components/src/components/types/boundingBox';
    export type Props = {
        className?: string;
        underlineClassName?: string;
        id?: string;
        isHighlighted?: boolean;
        onClick?: () => void;
        voiceOverLabel?: string;
    } & BoundingBoxType;
    export const BoundingBox: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/DocumentWrapper' {
    import * as React from 'react';
    import { DocumentProps } from 'react-pdf';
    import { RenderType } from '@allenai/pdf-components/src/utils/reader-utils';
    export type Props = {
        children?: React.ReactNode;
        renderType: RenderType;
    } & DocumentProps;
    export const DocumentWrapper: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/DownloadButton' {
    import * as React from 'react';
    export type Props = {
        className?: string;
        children?: React.ReactNode;
        pdfUrl: string;
    };
    /**
      * HTML anchor tag allows you to download a file from the same origin.
      * This is a workaround to download a file served from a different origin
      */
    export const DownloadButton: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/HighlightOverlay' {
    import * as React from 'react';
    import { Props as BoundingBoxProps } from '@allenai/pdf-components/src/components/BoundingBox';
    export type Props = {
        children?: React.ReactElement<BoundingBoxProps> | Array<React.ReactElement<BoundingBoxProps>>;
        pageIndex: number;
    };
    export const HighlightOverlay: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/icon/IconFlag' {
    import * as React from 'react';
    import { PositionType } from '@allenai/pdf-components/src/components/marker/ArrowFlagBase';
    type Props = {
        children?: React.ReactNode;
        className?: string;
        headerPosition?: PositionType;
    };
    export const IconFlag: React.FunctionComponent<Props>;
    export {};
}

declare module '@allenai/pdf-components/src/components/marker/ArrowFlag' {
    import * as React from 'react';
    import { BoundingBox as BoundingBoxType } from '@allenai/pdf-components/src/components/types/boundingBox';
    type Props = {
        boundingBoxes: Array<BoundingBoxType>;
        className?: string;
        label?: string;
    };
    export const ArrowFlag: React.FunctionComponent<Props>;
    export {};
}

declare module '@allenai/pdf-components/src/components/marker/ArrowFlagBase' {
    import * as React from 'react';
    export const POSITION: {
        readonly LEFT: "LEFT";
        readonly RIGHT: "RIGHT";
    };
    export type PositionType = typeof POSITION[keyof typeof POSITION];
    type Props = {
        className?: string;
        flagWidth?: number;
        label?: string;
        originTop?: number;
        position?: PositionType;
        tailLength?: number;
        tailWidgth?: number;
    };
    export const ArrowFlagBase: React.FunctionComponent<Props>;
    export {};
}

declare module '@allenai/pdf-components/src/components/outline/Outline' {
    import * as React from 'react';
    export const Outline: React.FunctionComponent;
}

declare module '@allenai/pdf-components/src/components/outline/OutlineItem' {
    import * as React from 'react';
    import { NodeDestination, OutlineNode } from '@allenai/pdf-components/src/components/types/outline';
    type Props = {
        items?: Array<OutlineNode>;
        onClick?: (dest: NodeDestination) => void;
    };
    export const OutlineItem: React.FunctionComponent<Props>;
    export {};
}

declare module '@allenai/pdf-components/src/components/Overlay' {
    import * as React from 'react';
    import { BoundingBox } from '@allenai/pdf-components/src/components/BoundingBox';
    export type Props = {
        children?: React.ReactElement<typeof BoundingBox> | Array<React.ReactElement<typeof BoundingBox>>;
    };
    export const Overlay: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/PageNumberControl' {
    import * as React from 'react';
    export type Props = {
        className?: string;
    };
    export const PageNumberControl: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/PageWrapper' {
    import * as React from 'react';
    import { RenderFunction } from 'react-pdf/dist/Page';
    import { RenderType } from '@allenai/pdf-components/src/utils/reader-utils';
    import { HighlightOverlay } from '@allenai/pdf-components/src/components/HighlightOverlay';
    import { Overlay } from '@allenai/pdf-components/src/components/Overlay';
    /**
      * A subset of react-pdf's Page component props exposed by this wrapper
      */
    export type PageProps = {
        error?: string | React.ReactElement | RenderFunction;
        loading?: string | React.ReactElement | RenderFunction;
        noData?: string | React.ReactElement | RenderFunction;
        pageIndex: number;
    };
    export type Props = {
        className?: string;
        loadingContentForBuildingImage?: React.ReactElement;
        children?: React.ReactElement<typeof HighlightOverlay | typeof Overlay>;
        renderType: RenderType;
    } & PageProps;
    export const PageWrapper: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/PrintButton' {
    import * as React from 'react';
    export type Props = {
        className?: string;
        children?: React.ReactNode;
    };
    /**
      * HTML anchor tag allows you to download a file from the same origin.
      * This is a workaround to download a file served from a different origin
      */
    export const PrintButton: React.FunctionComponent<Props>;
    export function onClickPrint(): void;
}

declare module '@allenai/pdf-components/src/components/SidePanel' {
    import * as React from 'react';
    export type Props = {
        minWidthPx?: number;
        maxWidthPx?: number;
        className?: string;
        children?: React.ReactNode;
        header?: string | React.ReactElement;
        content?: string | React.ReactElement;
        footer?: string | React.ReactElement;
        isVisible?: boolean;
        dragHandlePosition?: string;
        closeButton?: boolean | React.ReactElement;
        onClose?: () => void;
    };
    export const SidePanel: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/thumbnails/Thumbnail' {
    import * as React from 'react';
    type Props = {
        pageNumber: number;
    };
    export const Thumbnail: React.FunctionComponent<Props>;
    export {};
}

declare module '@allenai/pdf-components/src/components/thumbnails/ThumbnailList' {
    import * as React from 'react';
    type Props = any;
    export const ThumbnailList: React.FunctionComponent<Props>;
    export {};
}

declare module '@allenai/pdf-components/src/components/types/boundingBox' {
    export type Dimensions = {
        height: number;
        width: number;
    };
    export type Origin = {
        top: number;
        left: number;
    };
    export type Size = Dimensions & Origin;
    export type BoundingBox = {
        page: number;
    } & Size;
    export type RawBoundingBox = BoundingBox;
    export function scaleRawBoundingBox(boundingBoxRaw: RawBoundingBox, pageHeight: number, pageWidth: number): BoundingBox;
}

declare module '@allenai/pdf-components/src/components/types/outline' {
    import { PageRotation } from '@allenai/pdf-components/src/utils/rotate';
    import { Dimensions } from '@allenai/pdf-components/src/components/types/boundingBox';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    export type NodeDestination = Nullable<string> | any[];
    export type OutlineNode = {
        title: string;
        bold: boolean;
        italic: boolean;
        color: Uint8ClampedArray;
        dest: NodeDestination;
        url: Nullable<string>;
        unsafeUrl: string | undefined;
        newWindow: boolean | undefined;
        count: number | undefined;
        items: any[];
    };
    export type OutlinePosition = {
        pageNumber: number;
        dest: string;
        leftPoint: number;
        bottomPoint: number;
    };
    export type OutlinePositionsByPageNumberMap = Map<number, OutlinePosition[]>;
    export type OutlineTarget = {
        dest: string;
        leftPx: number;
        topPx: number;
    };
    export type OutlineTargetArgs = {
        pageNumber?: number;
        pageIndex?: number;
        scale: number;
        rotation: PageRotation;
        pageDimensions: Dimensions;
    };
}

declare module '@allenai/pdf-components/src/components/types/page' {
    export type PageReference = {
        num: number;
        gen: number;
    };
    export type PageProperties = {
        width: number;
        height: number;
        marginTop: number;
        marginBottom: number;
        marginLeft: number;
        marginRight: number;
    };
    /**
      * pageNumber: number starts from 1
      * pageIndex: number starts from 0
      */
    export type PageNumber = {
        pageNumber?: number;
        pageIndex?: number;
    };
}

declare module '@allenai/pdf-components/src/components/types/utils' {
    export type Nullable<T> = T | null;
}

declare module '@allenai/pdf-components/src/components/ZoomInButton' {
    import * as React from 'react';
    export type Props = {
        className?: string;
        children?: React.ReactNode;
        onZoom?: (scale: number) => void;
    };
    export const ZoomInButton: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/components/ZoomOutButton' {
    import * as React from 'react';
    export type Props = {
        className?: string;
        children?: React.ReactNode;
        onZoom?: (scale: number) => void;
    };
    export const ZoomOutButton: React.FunctionComponent;
}

declare module '@allenai/pdf-components/src/context/ContextProvider' {
    import * as React from 'react';
    export type Props = {
        children?: React.ReactElement | Array<React.ReactElement>;
    };
    export const ContextProvider: React.FunctionComponent<Props>;
}

declare module '@allenai/pdf-components/src/context/DocumentContext' {
    import * as React from 'react';
    import { pdfjs } from 'react-pdf';
    import { Dimensions } from '@allenai/pdf-components/src/components/types/boundingBox';
    import { OutlineNode, OutlinePositionsByPageNumberMap, OutlineTarget, OutlineTargetArgs } from '@allenai/pdf-components/src/components/types/outline';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    export interface IDocumentContext {
        numPages: number;
        numPagesLoaded: number;
        outline: Nullable<Array<OutlineNode>>;
        outlinePositions: Nullable<OutlinePositionsByPageNumberMap>;
        pageDimensions: Dimensions;
        pdfDocProxy?: pdfjs.PDFDocumentProxy;
        getOutlineTargets: (opts: OutlineTargetArgs) => OutlineTarget[];
        setNumPages: (numPages: number) => void;
        setNumPagesLoaded: (numPagesLoaded: number | ((prevNumPagesLoaded: number) => number)) => void;
        setOutline: (outline: Nullable<Array<OutlineNode>>) => void;
        setOutlinePositions: (outlinePositions: Nullable<OutlinePositionsByPageNumberMap>) => void;
        setPageDimensions: (pageDimensions: Dimensions) => void;
        setPdfDocProxy: (pdfDocProxy: pdfjs.PDFDocumentProxy) => void;
    }
    export const DocumentContext: React.Context<IDocumentContext>;
    export function useDocumentContextProps(): IDocumentContext;
    export function buildOutlinePositions(pdfDocProxy: pdfjs.PDFDocumentProxy, outline?: OutlineNode[]): Promise<OutlinePositionsByPageNumberMap>;
}

declare module '@allenai/pdf-components/src/context/PageRenderContext' {
    import * as React from 'react';
    import { pdfjs } from 'react-pdf';
    import { PageNumber } from '@allenai/pdf-components/src/components/types/page';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    import { VisibleEntryDetailType } from '@allenai/pdf-components/src/utils/VisibleEntriesDetector';
    export type RenderState = {
        promise: Promise<string>;
        objectURL: Nullable<string>;
    };
    export type PageNumberToRenderStateMap = Map<number, RenderState>;
    export interface IPageRenderContext {
        pageRenderStates: PageNumberToRenderStateMap;
        getObjectURLForPage: (pageNumber: PageNumber) => Nullable<string>;
        isBuildingObjectURLForPage: (pageNumber: PageNumber) => boolean;
        isFinishedBuildingAllPagesObjectURLs: () => boolean;
        buildObjectURLForPage: (pageNumber: PageNumber) => Promise<string>;
    }
    export const PageRenderContext: React.Context<IPageRenderContext>;
    export function usePageRenderContextProps({ pdfDocProxy, pixelRatio, scale, visiblePageRatios, }: {
        pdfDocProxy?: pdfjs.PDFDocumentProxy;
        pixelRatio: number;
        scale: number;
        visiblePageRatios: Map<number, VisibleEntryDetailType>;
    }): IPageRenderContext;
    export function getNeighboringPages(pages: number[], numTotalPages: number): number[];
    export function getPriorityQueue(visiblePages: number[], numPages: number): number[];
}

declare module '@allenai/pdf-components/src/context/ScrollContext' {
    import * as React from 'react';
    import { NodeDestination } from '@allenai/pdf-components/src/components/types/outline';
    import { PageNumber } from '@allenai/pdf-components/src/components/types/page';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    import { ScrollDirection } from '@allenai/pdf-components/src/utils/ScrollDirectionDetector';
    import { VisibleEntryDetailType } from '@allenai/pdf-components/src/utils/VisibleEntriesDetector';
    export interface IScrollContext {
        isOutlineTargetVisible: (dest: NodeDestination) => boolean;
        isPageVisible: (pageNumber: PageNumber) => boolean;
        scrollDirection: Nullable<ScrollDirection>;
        visibleOutlineTargets: Map<NodeDestination, VisibleEntryDetailType>;
        visiblePageRatios: Map<number, VisibleEntryDetailType>;
        resetScrollObservers: () => void;
        scrollRoot: Nullable<HTMLElement>;
        setScrollRoot: (root: Nullable<HTMLElement>) => void;
        scrollToOutlineTarget: (dest: NodeDestination) => void;
        setScrollThreshold: (scrollThreshold: Nullable<number>) => void;
        scrollToPage: (pageNumber: PageNumber) => void;
        updateScrollPosition: (zoomMultiplier: number) => void;
        setIsOutlineClicked: (isOutlineGetClicked: boolean) => void;
        scrollThresholdReachedInDirection: Nullable<ScrollDirection>;
        isAtTop: Nullable<boolean>;
        isOutlineClicked: Nullable<boolean>;
        pagesScrolledIntoView: Map<number, VisibleEntryDetailType>;
        setPageScrolledIntoViewThreshold: (threshold: number) => void;
    }
    export const ScrollContext: React.Context<IScrollContext>;
    export function useScrollContextProps(): IScrollContext;
}

declare module '@allenai/pdf-components/src/context/TransformContext' {
    import * as React from 'react';
    import { PageRotation } from '@allenai/pdf-components/src/utils/rotate';
    export const DEFAULT_ZOOM_SCALE = 1;
    export interface ITransformContext {
        pixelRatio: number;
        rotation: PageRotation;
        scale: number;
        zoomIncrementValue: number;
        setPixelRatio: (devicePixelRatio: number) => void;
        setRotation: (rotation: PageRotation) => void;
        setScale: (scale: number) => void;
        setZoomIncrementValue: (value: number) => void;
    }
    export const TransformContext: React.Context<ITransformContext>;
    export function useTransformContextProps(): ITransformContext;
}

declare module '@allenai/pdf-components/src/context/UiContext' {
    import * as React from 'react';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    export interface IUiContext {
        errorMessage: Nullable<string>;
        isLoading: boolean;
        isShowingHighlightOverlay: boolean;
        isShowingOutline: boolean;
        isShowingTextHighlight: boolean;
        isShowingThumbnail: boolean;
        setErrorMessage: (errorMessage: Nullable<string>) => void;
        setIsLoading: (isLoading: boolean) => void;
        setIsShowingHighlightOverlay: (isShowingHighlightOverlay: boolean) => void;
        setIsShowingOutline: (isShowingOutline: boolean) => void;
        setIsShowingTextHighlight: (isShowingTextHighlight: boolean) => void;
        setIsShowingThumbnail: (isShowingThumbnail: boolean) => void;
    }
    export const UiContext: React.Context<IUiContext>;
    export function useUiContextProps(): IUiContext;
}

declare module '@allenai/pdf-components/src/utils/format' {
    export const PercentFormatter: Intl.NumberFormat;
}

declare module '@allenai/pdf-components/src/utils/reader-utils' {
    export const RENDER_TYPE: {
        readonly MULTI_CANVAS: "multi-canvas";
        readonly SINGLE_CANVAS: "single-canvas";
    };
    export type RenderType = typeof RENDER_TYPE[keyof typeof RENDER_TYPE];
    export type RenderMode = 'canvas' | 'none';
    export function getRenderMode(renderType: RenderType): RenderMode;
    export function getClassNameSuffixFromRenderType(renderType: RenderType): string;
}

declare module '@allenai/pdf-components/src/utils/rotate' {
    export enum PageRotation {
        Rotate0 = 0,
        Rotate90 = 90,
        Rotate180 = 180,
        Rotate270 = 270
    }
    export function rotateClockwise(rotation: PageRotation): PageRotation;
    export function rotateCounterClockwise(rotation: PageRotation): PageRotation;
    /**
      * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,
      * e.g. whether the page "is rotated sideways."
      */
    export function isSideways(rotation: PageRotation): boolean;
}

declare module '@allenai/pdf-components/src/utils/scroll' {
    import { Dimensions } from '@allenai/pdf-components/src/components/types/boundingBox';
    import { PageProperties } from '@allenai/pdf-components/src/components/types/page';
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    import { PageRotation } from '@allenai/pdf-components/src/utils/rotate';
    export const PAGE_NAV_TARGET_ID_ROOT = "reader_pg_";
    export function generatePageIdFromIndex(pageIndex: number | string): string;
    export function scrollToId(id: string): void;
    export function scrollToPdfPageIndex(pageIndex: number | string): void;
    /**
        * Scroll PDF document to a specific position.
        * @param pageIndex The index of the page where the position locates at
        * @param leftPoints The horizontal distance between the origin and the position (in PDF coordinates)
        * @param bottomPoints The vertical distance between the origin and the position (in PDF coordinates)
        * @param rotation The rotation degree of the document
        */
    export function scrollToPosition(pageIndex: number, leftPoints: number, bottomPoints: number, rotation?: PageRotation): void;
    export function getScrollParent(node: HTMLElement): Nullable<HTMLElement>;
    export function calculateTopPx({ heightWithMarginsInPx, pageIndex, marginTopPx, heightPx, bottomPx, }: {
            heightWithMarginsInPx: number;
            pageIndex: number;
            marginTopPx: number;
            heightPx: number;
            bottomPx: number;
    }): number;
    /**
        * Get lengths, widths, and margins of a page.
        * @returns a PageProperties object
        */
    export function getPagePropertiesInPixels(): PageProperties;
    export function calculateTargetPosition({ scale, leftPoint, bottomPoint, pageDimensions, rotation, }: {
            scale: number;
            leftPoint: number;
            bottomPoint: number;
            pageDimensions: Dimensions;
            rotation: PageRotation;
    }): {
            leftPx: number;
            topPx: number;
    };
}

declare module '@allenai/pdf-components/src/utils/style' {
    import { Dimensions, Size } from '@allenai/pdf-components/src/components/types/boundingBox';
    import { PageRotation } from '@allenai/pdf-components/src/utils/rotate';
    export function computeBoundingBoxStyle(boundingBoxSize: Size, pageDimensions: Dimensions, rotation: PageRotation, scale: number): Size;
    export function computePageStyle(pageDimensions: Dimensions, rotation: PageRotation, scale: number): Size;
    export function getPageHeight(pageDimensions: Dimensions, rotation: PageRotation): number;
    export function getPageWidth(pageDimensions: Dimensions, rotation: PageRotation): number;
}

declare module '@allenai/pdf-components/src/utils/VisibleEntriesDetector' {
    export type SetVisibleEntriesCallback<TEntry> = (visible: Map<TEntry, VisibleEntryDetailType>) => void;
    export type onVisibleEntriesChangeCallback<TEntry> = (args: {
        visibleEntries: IntersectionObserverEntry[];
        hiddenEntries: IntersectionObserverEntry[];
        lastEntries: Map<TEntry, VisibleEntryDetailType>;
    }) => Map<TEntry, VisibleEntryDetailType>;
    export type VisibleEntryDetailType = {
        ratio: number;
        timestamp: number;
    };
    export default class VisibleEntriesDetector<TEntry> {
        _root: Element;
        _observer: IntersectionObserver;
        _lastVisibleEntries: Map<TEntry, VisibleEntryDetailType>;
        _setVisibleEntries: SetVisibleEntriesCallback<TEntry>;
        _onVisibleEntriesChange: onVisibleEntriesChangeCallback<TEntry>;
        constructor({ root, thresHold, setVisibleEntries, onVisibleEntriesChange, }: {
            root: Element;
            thresHold?: number | Array<number>;
            setVisibleEntries: SetVisibleEntriesCallback<TEntry>;
            onVisibleEntriesChange: onVisibleEntriesChangeCallback<TEntry>;
        });
        observeNodes(selector: string): void;
        destroy(): void;
    }
}

declare module '@allenai/pdf-components/src/utils/ScrollDirectionDetector' {
    import { Nullable } from '@allenai/pdf-components/src/components/types/utils';
    export enum ScrollDirection {
        UP = "UP",
        DOWN = "DOWN"
    }
    export default class ScrollDetector {
        _lastScrollTop: number;
        _lastScrollDirection: Nullable<ScrollDirection>;
        _el: Element;
        _setScrollDirection: (scrollDirection: ScrollDirection) => any;
        _lastScrollTopBeforeDirectionChange: number;
        _scrollThreshold?: number;
        _isScrollThresholdReachedInDirection: Nullable<ScrollDirection>;
        _setScrollThresholdReachedInDirection?: (scrollDirection: Nullable<ScrollDirection>) => any;
        _isAtTop: Nullable<boolean>;
        _setIsAtTop: (isAtTop: boolean) => any;
        constructor(el: Element, setScrollDirection: (scrollDirection: ScrollDirection) => any, setIsAtTop: (isAtTop: boolean) => any, setScrollThresholdReachedInDirection?: (scrollDirection: Nullable<ScrollDirection>) => any, scrollThreshold?: number);
        attachScrollListener(): void;
        detachScrollListener(): void;
        _onScroll: () => void;
    }
}

